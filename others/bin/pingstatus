#!/bin/bash

# Get the script name (without extension)
script_name=$(basename "$0")

# Create the script_name directory within ~/.config if it doesn't exist
if [[ ! -d "$HOME/.config/$script_name" ]]; then
    mkdir -p "$HOME/.config/$script_name"
fi

# Set the configuration file path
CONFIG_FILE="$HOME/.config/$script_name/devices.conf"
STATUS_FILE="$HOME/.config/$script_name/device_status.conf"


# Function to display the menu
display_menu() {
    echo "Menu:"
    echo "1. Display ping status"
    echo "2. Add new device"
    echo "3. Delete device"
    echo "4. Exit"
}

# Function to ping an IP address and return the status
ping_ip() {
    local ip=$1
    ping -c 1 -W 1 "$ip" &> /dev/null
    if [ $? -eq 0 ]; then
        echo "Up"
    else
        echo "Down"
    fi
}

# Function to display ping status in a table format
display_ping_status() {
    local lan_ip=$1
    local wan_ip=$2
    local name=$3
    local lan_status=$4
    local wan_status=$5

    # Print device information with fixed column widths
    if [ "$wan_ip" != "NA" ]; then
        printf "%-${max_name_length}s | %-$((max_lan_ip_length+6))s | %-$((max_wan_ip_length+6))s\n" "$name" "$lan_ip($lan_status)" "$wan_ip($wan_status)"
    else
        printf "%-${max_name_length}s | %-$((max_lan_ip_length+6))s | %-$((max_wan_ip_length+6))s\n" "$name" "$lan_ip($lan_status)" "NA"
    fi
}

write_device_status() {
  local lan_ip=$1
  local wan_ip=$2
  local name=$3
  local lan_status=$4
  local wan_status=$5
  local file_path=$STATUS_FILE

  # Combine status with IPs in the desired format
  local device_status="$lan_ip:$lan_status,$wan_ip:$wan_status,$name"

  # Check if the file exists (use -f for regular file)
  if [[ ! -f "$file_path" ]]; then
    # File doesn't exist, create it with an empty line
    touch "$file_path"
  fi

  # Check if an entry with the same LAN IP already exists
  local existing_line=$(grep -E "^$lan_ip:" "$file_path")

  if [[ -z "$existing_line" ]]; then
    # New entry, append to the file
    echo "$device_status" >> "$file_path"
  else
    # Update the existing line with the new status (all info)
    sed -i "s/^$lan_ip:.*/$device_status/" "$file_path"
  fi
}


# Function to add a new device to the configuration file
add_new_device() {
    # Prompt for device name
    echo "Enter device name:"
    read -r name

    # Validate device name (optional, add checks if needed)

    # Prompt for LAN IP address with validation
    while true; do
        echo "Enter LAN IP address:"
        read -r lan_ip

        # Regular expression for valid IPv4 address
        re='^(([0-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([0-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$'

        if [[ $lan_ip =~ $re ]]; then
            break
        else
            echo "Invalid LAN IP address format. Please try again."
        fi
    done

    # Accept empty WAN IP or do IP address validation similar to LAN IP
    while true; do
        echo "Enter WAN IP address:"
        read -r wan_ip

        if [[ $wan_ip == "" || $wan_ip =~ $re ]]; then
            break
        else
            echo "Invalid WAN IP address format. Please try again."
        fi
    done
    # Append new device to the configuration file
    echo "$lan_ip,$wan_ip,$name" >> "$CONFIG_FILE"
    echo "Device added successfully."
}

# Function to delete a device from the configuration file
delete_device() {
    echo "Enter the LAN IP address of the device to delete:"
    read -r lan_ip

    # Check if the device exists
    grep -q "^$lan_ip," "$CONFIG_FILE"
    if [ $? -eq 0 ]; then
        # Remove the device entry from the configuration file
        sed -i "/^$lan_ip,/d" "$CONFIG_FILE"
            # Check if the device exists in the status file
            grep -q "^$lan_ip," "$STATUS_FILE"
            if [ $? -eq 0 ]; then
                # Remove the device entry from the status file
                sed -i "/^$lan_ip,/d" "$STATUS_FILE"
            fi
        echo "Device deleted successfully."
    else
        echo "Device not found."
    fi
}

# Function to calculate maximum length of items
calculate_max_lengths() {
    while IFS=',' read -r lan_ip wan_ip name; do
        [ ${#name} -gt "$max_name_length" ] && max_name_length=${#name}
        [ ${#lan_ip} -gt "$max_lan_ip_length" ] && max_lan_ip_length=${#lan_ip}
        [ ${#wan_ip} -gt "$max_wan_ip_length" ] && max_wan_ip_length=${#wan_ip}
    done < "$CONFIG_FILE"
}

#Function to do the necessary action
do_action(){
    local action=$1

    if [ "$action" = "--all" ];then
        # Reset max lengths
        max_name_length=12
        max_lan_ip_length=15  # Assuming initial length
        max_wan_ip_length=15  # Assuming initial length

        # Calculate max lengths
        calculate_max_lengths

        clear
        # Print table header
        printf "%-${max_name_length}s | %-$((max_lan_ip_length+6))s | %-$((max_wan_ip_length+6))s\n" "Device Name" "LAN IP(LAN Status)" "WAN IP(WAN Status)"
        echo "$(printf "%-$((max_name_length+1))s" | tr ' ' -)|$(printf "%-$((max_lan_ip_length+8))s" | tr ' ' -)|$(printf "%-$((max_wan_ip_length+8))s" | tr ' ' -)"

        # Read configuration file and display ping status for LAN and WAN IP of each device
        while IFS=',' read -r lan_ip wan_ip name; do
            lan_status=$(ping_ip "$lan_ip")
            if [ "$wan_ip" != "" ]; then
                wan_status=$(ping_ip "$wan_ip")
            else
                wan_ip="NA"
                wan_status="NA"
            fi
            display_ping_status "$lan_ip" "$wan_ip" "$name" "$lan_status" "$wan_status"
            write_device_status "$lan_ip" "$wan_ip" "$name" "$lan_status" "$wan_status"
        done < "$CONFIG_FILE"
    else
        # Read configuration file and check ping status for LAN and WAN IP of each device
        while IFS=',' read -r lan_ip wan_ip name; do
            lan_status=$(ping_ip "$lan_ip")
            if [ "$wan_ip" != "" ]; then
                wan_status=$(ping_ip "$wan_ip")
            else
                wan_ip="NA"
                wan_status="NA"
            fi
            write_device_status "$lan_ip" "$wan_ip" "$name" "$lan_status" "$wan_status"
        done < "$CONFIG_FILE"
    fi
}

# Main loop
# Check if configuration file exists, if not create it
if [ ! -f "$CONFIG_FILE" ]; then
    touch "$CONFIG_FILE"
fi

if [ "$1" = "--sync" ]; then
    touch '/home/akhil/dashboard/sync'
    # Do ping and write status
    do_action "--write"
else
    touch '/home/akhil/dashboard/other'
    #Display menu
    while true; do
        display_menu
        read -rp "Enter your choice: " choice

        case $choice in
            1)
                # Do ping, display and write status
                do_action "--all"
                ;;
            2)
                # Add a new device
                add_new_device
                ;;
            3)
                # Delete a device
                delete_device
                ;;
            4)
                echo "Exiting."
                exit 0
                ;;
            *)
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
fi
